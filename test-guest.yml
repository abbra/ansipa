---
# Include Task to instantiate a single test VM
#   The single VM info is passed in the 'vm' var
#   A list of vms_info is passed in the 'vms_info' var

- name: destroy the VM if it already exists
  command: virsh destroy {{vm.name}}
  when: vm.name in vms_info.list_vms

- name: destroy the VM storage if any
  file: path={{basepath}}/{{vm.name}}.img state=absent

- name: (re)create the VM storage
  command: qemu-img create -f qcow2 -o backing_file={{basepath}}/{{vm.baseimg}},backing_fmt=qcow2 {{basepath}}/{{vm.name}}.img

- name: create the VM
  command: virt-install -n {{vm.name}}
           -r {{vm.mem}}
           --vcpus {{vm.cpu}}
           --os-type {{vm.os.type}}
           --os-variant {{vm.os.variant}}
           --network network=default
           --graphics spice
           --{{vm.virt_hypervisor}}
           --virt-type {{vm.virt_type}}
           --disk {{basepath}}/{{vm.name}}.img
           --metadata description={\"group\"=\"test\"}
           --import
           --noautoconsole
           --transient

- name: get vm addr
  script: virt-inventory.py --host {{vm.name}}
  register: virt_inv
  until: virt_inv.stdout.find(vm.name) != -1
  retries: 20
  delay: 10

- name: regiester the output as json
  set_fact:
    vm_inv={{virt_inv.stdout|from_json}}

- name: Wait for SSH to come up
  local_action: wait_for port=22 host={{vm_inv[vm.name]['ansible_host']}} timeout=10
