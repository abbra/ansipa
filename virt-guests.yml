---
- name: create libvirt guests
  hosts: localhost
  user: root

  vars_files:
      - vars/guests.yml

  tasks:
      - name: start libvirtd
        service: name=libvirtd state=started enabled=yes
        register: libvirtd

      - name: wait for libvirtd to get up
        pause: seconds=30
        when: libvirtd.changed

      - name: get list of vms
        virt: command=list_vms
        register: vms_info

      - name: copy kickstart
        copy:
          src: '{{item.kickstart}}'
          dest: '{{basepath}}/{{item.kickstart}}'
        with_items: "{{baseimg}}"

      - name: create base VM if none available
        command: virt-install -n {{item.name}}
                 -r {{item.mem}}
                 --vcpus {{item.cpu}}
                 --location {{basepath}}/{{item.iso}}
                 --os-type {{item.os.type}}
                 --os-variant {{item.os.variant}}
                 --network network={{netname}}
                 --initrd-inject {{basepath}}/{{item.kickstart}}
                 --extra-args="inst.ks=file:/{{item.kickstart}} inst.text"
                 --graphics spice
                 --{{item.virt_hypervisor}}
                 --virt-type {{item.virt_type}}
                 --disk size={{item.disksize}},path={{basepath}}/{{item.name}}.img
                 --noautoconsole
                 --noreboot
                 --wait -1
        when: item.name not in vms_info.list_vms
        with_items: "{{baseimg}}"

      - name: get guest info
        virt: command=info
        register: virt_info

      - name: make sure the base vm is not running
        virt: name={{item.name}} state=shutdown
        with_items: "{{baseimg}}"

      - include: test-guest.yml vm={{guests[item]}}
        with_items: "{{guests}}"
        tags: destroy

      - name: source new inventry
        script: virt-inventory.py  --list
        register: virt_inv

      - name: regiester the output as json
        set_fact:
          vm_inv={{virt_inv.stdout|from_json}}

      - name: add hosts in test_hosts group
        add_host:
          hostname: "{{item}}"
          ansible_host: '{{vm_inv["_meta"]["hostvars"][guests[item].img_name]["ansible_host"]}}'
          groups: test_hosts
        with_items: "{{guests}}"

- name: install stuff on guests
  hosts: test_hosts
  user: root

  vars_files:
      - vars/guests.yml

  tasks:
     - name: Set system's host name
       hostname:
         name: "{{inventory_hostname}}.{{domain}}"

     - name: Enable FreeIPA master repo for dependencies
       yum_repository:
         name: copr_freeipa_master_dependencies
         description: Copr repo for freeipa-master owned by @freeipa
         baseurl: "{{deprepo}}"
         gpgcheck: no
         enabled: yes

     - name: Enable FreeIPA master repo nightlies
       yum_repository:
         name: copr_freeipa_master_nightly
         description: Copr repo for freeipa-master owned by @freeipa
         baseurl: "{{iparepo}}"
         gpgcheck: no
         enabled: yes

     - name: Update freeipa-server packages
       dnf:
         name: freeipa-server
         state: latest

     - name: Check if FreeIPA is configured already
       stat:
         path=/etc/ipa/default.conf
       register: ipa_conf

     - name: Put SELinux in Permissive ... REMOVE WHEN UPDATED POLICY IS AVAILABLE
       selinux:
         policy: targeted
         state: permissive

     - set_fact:
         master={{guests[ansible_hostname].master}}

     - set_fact:
         master_ip={{hostvars[master]["ansible_default_ipv4"]["address"]}}

     - name: Install Freeipa Master
       command: ipa-server-install -r {{realm}} -n {{domain}} -p {{dm_pw}} -a {{admin_pw}} --hostname={{ansible_hostname}}.{{domain}} --no-host-dns --setup-dns --forwarder={{forwarder}} -U
       when: master == ansible_hostname and ipa_conf.stat.exists == False

     - block:
        - name: Wait for Master to be available
          debug:
            msg: "Waiting for {{master}}"
          until: lookup('dig', master+'.'+domain, '@'+master_ip) == master_ip
          retries: 30
          delay: 15

        - name: stop NM from setting resolv.conf
          ini_file:
            path: /etc/NetworkManager/NetworkManager.conf
            section: main
            option: dns
            value: none

        - name: Set master in resolv.conf
          lineinfile:
            path: /etc/resolv.conf
            regexp: '^nameserver\s'
            line: "nameserver {{master_ip}}"

        - name: remove any other nameserver
          lineinfile:
            path: /etc/resolv.conf
            regexp: '^nameserver\s(?!{{master_ip|replace(",", "\.")}})'
            state: absent

        - name: Promote to replica
          command: ipa-replica-install -P admin -w {{admin_pw}} --no-host-dns

       when: master != ansible_hostname and ipa_conf.stat.exists == False
